<#
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var __filterDefinitions =
	new []
	{
		new { Name = "SerializingRequestTracing", IsSerialization = true, IsRequest = true, IsBinaryFilter = false },
		new { Name = "SerializedRequestTracing", IsSerialization = true, IsRequest = true, IsBinaryFilter = true },
		new { Name = "DeserializingRequestTracing", IsSerialization = false, IsRequest = true, IsBinaryFilter = true },
		new { Name = "DeserializedRequestTracing", IsSerialization = false, IsRequest = true, IsBinaryFilter = false },
		new { Name = "SerializingResponseTracing", IsSerialization = true, IsRequest = false, IsBinaryFilter = false },
		new { Name = "SerializedResponseTracing", IsSerialization = true, IsRequest = false, IsBinaryFilter = true },
		new { Name = "DeserializingResponseTracing", IsSerialization = false, IsRequest = false, IsBinaryFilter = true },
		new { Name = "DeserializedResponseTracing", IsSerialization = false, IsRequest = false, IsBinaryFilter = false },
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace MsgPack.Rpc.Serialization
{
	// This file generated from Filters.tt T4Template.
	// Do not modify this file. Edit Filters.tt instead.
<#
foreach( var __filter in __filterDefinitions )
{
#>
	
	/// <summary>
	///		Filter provider for <#= 
				( __filter.IsBinaryFilter 
					? ( __filter.IsSerialization ? "serialized" : "deserializing" ) 
					: ( __filter.IsSerialization ? "serializing" : "deserialized" ) 
				)
			#> <#= 
				( __filter.IsRequest ? "request" : "response" ) #> tracing.
	/// </summary>
	public sealed class <#= __filter.Name #>FilterProvider : IFilterProvider< <#= 			
		__filter.IsBinaryFilter 
		? "SerializedMessageFilter<Message" + ( __filter.IsSerialization ? "Serialization" : "Deserialization" ) + "Context>" 
		: ( __filter.IsRequest ? "Request" : "Response" ) + "Message" + ( __filter.IsSerialization ? "Serialization" : "Deserialization" ) + "Filter"
 #> >
	{
		private readonly StringBuilder _buffer = new StringBuilder();

		/// <summary>
		/// 	Get priority of this filter provider.
		/// </summary>
		/// <value>Always 0.</value>
		public int Priority
		{
			get { return 0; }
		}

		/// <summary>
		/// 	Return captured trace message.
		/// </summary>
		/// <returns>Captured trace message.</returns>
		public string GetTrace()
		{
			return this._buffer.ToString();
		}

		/// <summary>
		/// 	Return new filter.
		/// </summary>
		/// <returns>New filter for tracing.</returns>
		public <#= 			
		__filter.IsBinaryFilter 
		? "SerializedMessageFilter<Message" + ( __filter.IsSerialization ? "Serialization" : "Deserialization" ) + "Context>" 
		: ( __filter.IsRequest ? "Request" : "Response" ) + "Message" + ( __filter.IsSerialization ? "Serialization" : "Deserialization" ) + "Filter"
 #> GetFilter()
		{
			return new <#= __filter.Name #>Filter( this._buffer );
		}
		
		private sealed class <#= __filter.Name #>Filter : <#= 
			__filter.IsBinaryFilter 
			? "SerializedMessageFilter<Message" + ( __filter.IsSerialization ? "Serialization" : "Deserialization" ) + "Context>" 
			: ( __filter.IsRequest ? "Request" : "Response" ) + "Message" + ( __filter.IsSerialization ? "Serialization" : "Deserialization" ) + "Filter"
		#>
		{
<#
		if( __filter.IsBinaryFilter )
		{
#>
			private readonly StringWriter _writer;

			public <#= __filter.Name #>Filter( StringBuilder buffer )
			{
				this._writer = new StringWriter( buffer );
			}

			protected override IEnumerable<byte> ProcessCore( IEnumerable<byte> binaryMessage, <#= 
				"Message" + ( __filter.IsSerialization ? "Serialization" : "Deserialization" ) + "Context"
				#> context )
			{
				using ( var buffer = new MemoryStream() )
				{
					bool isHead = true;
					foreach ( var b in binaryMessage )
					{
						if ( isHead )
						{
							isHead = false;
						}
						else
						{
							this._writer.Write( ' ' );
						}

						this._writer.Write( b.ToString( "x2" ) );
						buffer.WriteByte( b );
						yield return b;
					}

					this._writer.WriteLine();

					buffer.Seek( 0L, SeekOrigin.Begin );
					var unpacker = new Unpacker( buffer );
					try
					{
						this._writer.WriteLine( "Message:" );
						foreach ( var message in unpacker )
						{
							this._writer.WriteLine( "\t'{0}'", message );
						}
					}
					catch ( Exception ex )
					{
						this._writer.WriteLine( "Exception:'{0}'", ex );
					}
				}
			} 
<#
		}
		else
		{
#>
			private readonly StringWriter _writer;

			public <#= __filter.Name #>Filter( StringBuilder buffer )
			{
				this._writer = new StringWriter( buffer );
			}

			protected override void ProcessCore( <#= 
				( __filter.IsRequest ? "Request" : "Response" ) + "Message" + 
				( __filter.IsSerialization ? "Serialization" : "Deserialization" ) + "Context" 
				#> context )
				{
				if ( !context.SerializationError.IsSuccess )
				{
					this._writer.WriteLine( "SerializationError: {0}", context.SerializationError );
					var unpacker = new Unpacker( context<#= __filter.IsSerialization ? ".Buffer" : ""  #>.ReadBytes() );
					try
					{
						this._writer.WriteLine( "Message:" );
						foreach ( var message in unpacker )
						{
							this._writer.WriteLine( "\t'{0}'", message );
						}
					}
					catch ( Exception ex )
					{
						this._writer.WriteLine( "Exception:'{0}'", ex );
					}
				}
				else
				{
<#
			if( __filter.IsRequest )
			{
#>
					if( context.MessageId != null )
					{
						this._writer.WriteLine( 
							"Type:Request, ID:{0}, Method:'{1}', Argments:'{2}'", 
							context.MessageId, 
							context.MethodName, 
							context.Arguments.Aggregate(
								new StringBuilder( "[" ),
								( buffer, item ) => ( buffer.Length > 1 ? buffer.Append( ", " ) : buffer ).Append( item )
							).Append( "]" )
						);
					}
					else
					{
						this._writer.WriteLine( 
							"Type:Notification, Method:'{0}', Argments:'{1}'", 
							context.MethodName, 
							context.Arguments.Aggregate(
								new StringBuilder( "[" ),
								( buffer, item ) => ( buffer.Length > 1 ? buffer.Append( ", " ) : buffer ).Append( item )
							).Append( "]" )
						);
					}
<#
			}
			else
			{
				if( __filter.IsSerialization )
				{
#>
					if( context.Exception == null )
					{
						if( context.IsVoid )
						{
							this._writer.WriteLine( "ID:{0}, (void)", context.MessageId );
						}
						else
						{
							this._writer.WriteLine( "ID:{0}, Result:{1}", context.MessageId, context.ReturnValue );
						}
					}
					else
					{
						this._writer.WriteLine( "ID:{0}, Error:{1}", context.MessageId, context.Exception );
					}
	<#
					}
					else
					{
	#>
					if( context.Error.IsNil )
					{
						this._writer.WriteLine( "ID:{0}, Result:{1}", context.MessageId, context.DeserializedResult );
					}
					else
					{
						this._writer.WriteLine( "ID:{0}, Error:{1}, ErrorDetail:{2}", context.MessageId, context.Error, context.DeserializedResult );
					}
<#
				}
			}
#>
				}
			}
<#
		}
#>
		}
	}
<#
}
#>
}
