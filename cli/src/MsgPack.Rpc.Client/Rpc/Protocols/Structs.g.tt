<#
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#><#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="../../../Struct.tt" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the ""License"");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an ""AS IS"" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//

using System;
using System.Net.Sockets;
using System.Runtime.InteropServices;

using MsgPack.Rpc.Serialization;

// This file is generated by T4Template. Do not modify this file directly.

namespace MsgPack.Rpc.Protocols
{
<#
this.PushIndent( "\t" );
GetStructCodeGenerator(
	"ConnectingContext",
	new List<FieldDeclaration>()
	{
		//new FieldDeclaration( "_sessionContext", "ClientSessionContext", false ) { SummaryComment = "Get session context.", ValueComment = "Session context." },
		new FieldDeclaration( "_client", "IAsyncConnectClient", false ) { SummaryComment = "Get client of this operation.", ValueComment = "Client of this operation." },
		//new FieldDeclaration( "_socketContext", "RpcSocketAsyncEventArgs", false ) { SummaryComment = "Get asynchronous socket context.", ValueComment = "Asynchronous socket context." },
		new FieldDeclaration( "_userAsyncState", "object", false ) { SummaryComment = "Get user supplied async state.", ValueComment = "User supplied async state. This value can be null." },
	},
	typeOptions : ValueTypeOptions.Public,
	constructorAccessibility : MemberAccessibility.Assembly,
	typeSummary : "Context information of connecting operation."
)();
#>

<#
GetStructCodeGenerator(
	"SendingContext",
	new List<FieldDeclaration>()
	{
		new FieldDeclaration( "_sessionContext", "ClientSessionContext", false ) { SummaryComment = "Get session context.", ValueComment = "Session context." },
		new FieldDeclaration( "_sendingBuffer", "RpcOutputBuffer", false ) { SummaryComment = "Get buffer for sending data.", ValueComment = "Buffer for sending data." },
		new FieldDeclaration( "_messageId", "int?", false ) { SummaryComment = "Get message ID of request message.", ValueComment = "Message ID of request message." },
		new FieldDeclaration( "_onMessageSent", " Action<SendingContext, Exception, bool>", false ) { ValueComment = "Delegate to callback when sending is completed.", Options = FieldOptions.DirectAccess, Accessibility = MemberAccessibility.Private },
	},
	typeOptions : ValueTypeOptions.Public,
	constructorAccessibility : MemberAccessibility.Assembly,
	typeSummary : "Context information of sending operation."
)();
#>

<#
GetStructCodeGenerator(
	"ReceivingContext",
	new List<FieldDeclaration>()
	{
		new FieldDeclaration( "_sessionContext", "ClientSessionContext", false ) { SummaryComment = "Get session context.", ValueComment = "Session context." },
		new FieldDeclaration( "_receivingBuffer", "RpcInputBuffer<RpcSocketAsyncEventArgs,ReceivingContext>", false ) { SummaryComment = "Get buffer for receiving data.", ValueComment = "Buffer for receiving data." },
		new FieldDeclaration( "_unpacker", "Unpacker", false ) { SummaryComment = "Get unpacker to deserialize receiving data.", ValueComment = "Unpacker to deserialize data." },
	},
	typeOptions : ValueTypeOptions.Public,
	constructorAccessibility : MemberAccessibility.Assembly,
	typeSummary : "Context information of receiving operation."
)();
this.PopIndent();
#>
}