//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the ""License"");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an ""AS IS"" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//

using System;
using System.Net.Sockets;
using System.Runtime.InteropServices;

using MsgPack.Rpc.Serialization;
using System.Threading;

// This file is generated by T4Template. Do not modify this file directly.

namespace MsgPack.Rpc.Protocols
{
	partial struct ConnectingContext
	{
		/// <summary>
		///		Get cancellation token to cancel asynchronous invocation.
		/// </summary>
		/// <value>
		///		Cancellation token to cancel asynchronous invocation.
		/// </value>
		//public CancellationToken CancellationToken { get { return this._sessionContext.SocketContext.CancellationToken; } }
		
		/// <summary>
		///		Get socket context.
		/// </summary>
		/// <value>Socket context.</value>
		//public RpcSocketAsyncEventArgs SocketContext { get { return this._sessionContext.SocketContext; } }
	}

	partial struct SendingContext
	{
		/// <summary>
		///		Get cancellation token to cancel asynchronous invocation.
		/// </summary>
		/// <value>
		///		Cancellation token to cancel asynchronous invocation.
		/// </value>
		public CancellationToken CancellationToken { get { return this._sessionContext.SocketContext.CancellationToken; } }

		/// <summary>
		///		Get socket context.
		/// </summary>
		/// <value>Socket context.</value>
		public RpcSocketAsyncEventArgs SocketContext { get { return this._sessionContext.SocketContext; } }

		/// <summary>
		///		Invoke callback for sending is completed.
		/// </summary>
		/// <param name="error">Sending error.</param>
		/// <param name="completedSynchrnously">Whether operation is completed synchronously.</param>
		public void OnMessageSent( Exception error, bool completedSynchrnously )
		{
			var handler = this._onMessageSent;
			if ( handler != null )
			{
				handler( this, error, completedSynchrnously );
			}
		}
	}

	partial struct ReceivingContext
	{
		/// <summary>
		///		Get cancellation token to cancel asynchronous invocation.
		/// </summary>
		/// <value>
		///		Cancellation token to cancel asynchronous invocation.
		/// </value>
		public CancellationToken CancellationToken { get { return this._sessionContext.SocketContext.CancellationToken; } }

		/// <summary>
		///		Get socket context.
		/// </summary>
		/// <value>Socket context.</value>
		public RpcSocketAsyncEventArgs SocketContext { get { return this._sessionContext.SocketContext; } }
	}
}