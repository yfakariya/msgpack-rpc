
//
// MessagePack for CLI
//
// Copyright (C) 2010 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the ""License"");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an ""AS IS"" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//

using System;
using System.Net.Sockets;
using System.Runtime.InteropServices;

using MsgPack.Rpc.Serialization;

// This file is generated by T4Template. Do not modify this file directly.

namespace MsgPack.Rpc.Protocols
{
	/// <summary>
	/// 	Context information of connecting operation.
	/// </summary>
	[StructLayout( LayoutKind.Sequential )]
	public partial struct ConnectingContext  : IEquatable<ConnectingContext>
	{
		/// <summary>
		/// 	Get empty instance.
		/// </summary>
		public static ConnectingContext Null { get { return default( ConnectingContext ); } }
		
		/// <summary>
		/// 	Client of this operation.
		/// </summary>
		private readonly IAsyncConnectClient _client;
		
		/// <summary>
		/// 	Get client of this operation.
		/// </summary>
		/// <value>
		/// 	Client of this operation.
		/// </value>
		public IAsyncConnectClient Client
		{
			get
			{
				return this._client;
			}
		}
				
		/// <summary>
		/// 	User supplied async state. This value can be null.
		/// </summary>
		private readonly object _userAsyncState;
		
		/// <summary>
		/// 	Get user supplied async state.
		/// </summary>
		/// <value>
		/// 	User supplied async state. This value can be null.
		/// </value>
		public object UserAsyncState
		{
			get
			{
				return this._userAsyncState;
			}
		}
				
		/// <summary>
		/// 	Initialize new instance.
		/// </summary>
		/// <param name="client">
		/// 	Client of this operation.
		/// </param>
		/// <param name="userAsyncState">
		/// 	User supplied async state. This value can be null.
		/// </param>
		internal ConnectingContext(
			IAsyncConnectClient client,
			object userAsyncState
		)
		{
			this._client = client;
			this._userAsyncState = userAsyncState;
		}
				
		/// <summary>
		/// 	Returns hash code of this instnace.
		/// </summary>
		/// <returns>
		/// 	Hash code of this instance.
		/// </returns>
		public override int GetHashCode()
		{
			return ( this._client == null ? 0 : this._client.GetHashCode() ) ^ ( this._userAsyncState == null ? 0 : this._userAsyncState.GetHashCode() );
		}
				
		/// <summary>
		/// 	Compare specified object is <see cref="ConnectingContext"/> and equal to this instnace.
		/// </summary>
		/// <param name="obj">
		/// 	<see cref="ConnectingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified instance equals to this instance then true.
		/// </returns>
		public override bool Equals( Object obj )
		{
			if( Object.ReferenceEquals( obj, null ) )
			{
				return false;
			}
			
			if( !( obj is ConnectingContext ) )
			{
				return false;
			}
			
			return this.Equals( ( ConnectingContext )obj );
		}
				
		/// <summary>
		/// 	Compare specified object is equal to this instnace.
		/// </summary>
		/// <param name="obj">
		/// 	<see cref="ConnectingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified instance equals to this instance then true.
		/// </returns>
		public bool Equals( ConnectingContext other )
		{
			return ( this._client == null ? other._client == null : this._client.Equals( other._client ) ) && ( this._userAsyncState == null ? other._userAsyncState == null : this._userAsyncState.Equals( other._userAsyncState ) );
		}
		
		/// <summary>
		/// 	Compare specified two objects are equal.
		/// </summary>
		/// <param name="left">
		/// 	<see cref="ConnectingContext"/> to compare.
		/// </param>
		/// <param name="right">
		/// 	<see cref="ConnectingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified objects are equal then true.
		/// </returns>
		public static bool operator ==( ConnectingContext left, ConnectingContext right )
		{
			return left.Equals( right );
		}
		
		/// <summary>
		/// 	Compare specified two objects are not equal.
		/// </summary>
		/// <param name="left">
		/// 	<see cref="ConnectingContext"/> to compare.
		/// </param>
		/// <param name="right">
		/// 	<see cref="ConnectingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified objects are not equal then true.
		/// </returns>
		public static bool operator !=( ConnectingContext left, ConnectingContext right )
		{
			return !left.Equals( right );
		}		
	}
	
	/// <summary>
	/// 	Context information of sending operation.
	/// </summary>
	[StructLayout( LayoutKind.Sequential )]
	public partial struct SendingContext  : IEquatable<SendingContext>
	{
		/// <summary>
		/// 	Get empty instance.
		/// </summary>
		public static SendingContext Null { get { return default( SendingContext ); } }
		
		/// <summary>
		/// 	Session context.
		/// </summary>
		private readonly ClientSessionContext _sessionContext;
		
		/// <summary>
		/// 	Get session context.
		/// </summary>
		/// <value>
		/// 	Session context.
		/// </value>
		public ClientSessionContext SessionContext
		{
			get
			{
				return this._sessionContext;
			}
		}
				
		/// <summary>
		/// 	Buffer for sending data.
		/// </summary>
		private readonly RpcOutputBuffer _sendingBuffer;
		
		/// <summary>
		/// 	Get buffer for sending data.
		/// </summary>
		/// <value>
		/// 	Buffer for sending data.
		/// </value>
		public RpcOutputBuffer SendingBuffer
		{
			get
			{
				return this._sendingBuffer;
			}
		}
				
		/// <summary>
		/// 	Message ID of request message.
		/// </summary>
		private readonly int? _messageId;
		
		/// <summary>
		/// 	Get message ID of request message.
		/// </summary>
		/// <value>
		/// 	Message ID of request message.
		/// </value>
		public int? MessageId
		{
			get
			{
				return this._messageId;
			}
		}
				
		/// <summary>
		/// 	Delegate to callback when sending is completed.
		/// </summary>
		private readonly  Action<SendingContext, Exception, bool> _onMessageSent;
		
		/// <summary>
		/// 	Initialize new instance.
		/// </summary>
		/// <param name="sessionContext">
		/// 	Session context.
		/// </param>
		/// <param name="sendingBuffer">
		/// 	Buffer for sending data.
		/// </param>
		/// <param name="messageId">
		/// 	Message ID of request message.
		/// </param>
		/// <param name="onMessageSent">
		/// 	Delegate to callback when sending is completed.
		/// </param>
		internal SendingContext(
			ClientSessionContext sessionContext,
			RpcOutputBuffer sendingBuffer,
			int? messageId,
			 Action<SendingContext, Exception, bool> onMessageSent
		)
		{
			this._sessionContext = sessionContext;
			this._sendingBuffer = sendingBuffer;
			this._messageId = messageId;
			this._onMessageSent = onMessageSent;
		}
				
		/// <summary>
		/// 	Returns hash code of this instnace.
		/// </summary>
		/// <returns>
		/// 	Hash code of this instance.
		/// </returns>
		public override int GetHashCode()
		{
			return ( this._sessionContext == null ? 0 : this._sessionContext.GetHashCode() ) ^ ( this._sendingBuffer == null ? 0 : this._sendingBuffer.GetHashCode() ) ^ ( this._messageId == null ? 0 : this._messageId.GetHashCode() ) ^ ( this._onMessageSent == null ? 0 : this._onMessageSent.GetHashCode() );
		}
				
		/// <summary>
		/// 	Compare specified object is <see cref="SendingContext"/> and equal to this instnace.
		/// </summary>
		/// <param name="obj">
		/// 	<see cref="SendingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified instance equals to this instance then true.
		/// </returns>
		public override bool Equals( Object obj )
		{
			if( Object.ReferenceEquals( obj, null ) )
			{
				return false;
			}
			
			if( !( obj is SendingContext ) )
			{
				return false;
			}
			
			return this.Equals( ( SendingContext )obj );
		}
				
		/// <summary>
		/// 	Compare specified object is equal to this instnace.
		/// </summary>
		/// <param name="obj">
		/// 	<see cref="SendingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified instance equals to this instance then true.
		/// </returns>
		public bool Equals( SendingContext other )
		{
			return ( this._sessionContext == null ? other._sessionContext == null : this._sessionContext.Equals( other._sessionContext ) ) && ( this._sendingBuffer == null ? other._sendingBuffer == null : this._sendingBuffer.Equals( other._sendingBuffer ) ) && ( this._messageId == null ? other._messageId == null : this._messageId.Equals( other._messageId ) ) && ( this._onMessageSent == null ? other._onMessageSent == null : this._onMessageSent.Equals( other._onMessageSent ) );
		}
		
		/// <summary>
		/// 	Compare specified two objects are equal.
		/// </summary>
		/// <param name="left">
		/// 	<see cref="SendingContext"/> to compare.
		/// </param>
		/// <param name="right">
		/// 	<see cref="SendingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified objects are equal then true.
		/// </returns>
		public static bool operator ==( SendingContext left, SendingContext right )
		{
			return left.Equals( right );
		}
		
		/// <summary>
		/// 	Compare specified two objects are not equal.
		/// </summary>
		/// <param name="left">
		/// 	<see cref="SendingContext"/> to compare.
		/// </param>
		/// <param name="right">
		/// 	<see cref="SendingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified objects are not equal then true.
		/// </returns>
		public static bool operator !=( SendingContext left, SendingContext right )
		{
			return !left.Equals( right );
		}		
	}
	
	/// <summary>
	/// 	Context information of receiving operation.
	/// </summary>
	[StructLayout( LayoutKind.Sequential )]
	public partial struct ReceivingContext  : IEquatable<ReceivingContext>
	{
		/// <summary>
		/// 	Get empty instance.
		/// </summary>
		public static ReceivingContext Null { get { return default( ReceivingContext ); } }
		
		/// <summary>
		/// 	Session context.
		/// </summary>
		private readonly ClientSessionContext _sessionContext;
		
		/// <summary>
		/// 	Get session context.
		/// </summary>
		/// <value>
		/// 	Session context.
		/// </value>
		public ClientSessionContext SessionContext
		{
			get
			{
				return this._sessionContext;
			}
		}
				
		/// <summary>
		/// 	Buffer for receiving data.
		/// </summary>
		private readonly RpcInputBuffer<RpcSocketAsyncEventArgs,ReceivingContext> _receivingBuffer;
		
		/// <summary>
		/// 	Get buffer for receiving data.
		/// </summary>
		/// <value>
		/// 	Buffer for receiving data.
		/// </value>
		public RpcInputBuffer<RpcSocketAsyncEventArgs,ReceivingContext> ReceivingBuffer
		{
			get
			{
				return this._receivingBuffer;
			}
		}
				
		/// <summary>
		/// 	Unpacker to deserialize data.
		/// </summary>
		private readonly Unpacker _unpacker;
		
		/// <summary>
		/// 	Get unpacker to deserialize receiving data.
		/// </summary>
		/// <value>
		/// 	Unpacker to deserialize data.
		/// </value>
		public Unpacker Unpacker
		{
			get
			{
				return this._unpacker;
			}
		}
				
		/// <summary>
		/// 	Initialize new instance.
		/// </summary>
		/// <param name="sessionContext">
		/// 	Session context.
		/// </param>
		/// <param name="receivingBuffer">
		/// 	Buffer for receiving data.
		/// </param>
		/// <param name="unpacker">
		/// 	Unpacker to deserialize data.
		/// </param>
		internal ReceivingContext(
			ClientSessionContext sessionContext,
			RpcInputBuffer<RpcSocketAsyncEventArgs,ReceivingContext> receivingBuffer,
			Unpacker unpacker
		)
		{
			this._sessionContext = sessionContext;
			this._receivingBuffer = receivingBuffer;
			this._unpacker = unpacker;
		}
				
		/// <summary>
		/// 	Returns hash code of this instnace.
		/// </summary>
		/// <returns>
		/// 	Hash code of this instance.
		/// </returns>
		public override int GetHashCode()
		{
			return ( this._sessionContext == null ? 0 : this._sessionContext.GetHashCode() ) ^ ( this._receivingBuffer == null ? 0 : this._receivingBuffer.GetHashCode() ) ^ ( this._unpacker == null ? 0 : this._unpacker.GetHashCode() );
		}
				
		/// <summary>
		/// 	Compare specified object is <see cref="ReceivingContext"/> and equal to this instnace.
		/// </summary>
		/// <param name="obj">
		/// 	<see cref="ReceivingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified instance equals to this instance then true.
		/// </returns>
		public override bool Equals( Object obj )
		{
			if( Object.ReferenceEquals( obj, null ) )
			{
				return false;
			}
			
			if( !( obj is ReceivingContext ) )
			{
				return false;
			}
			
			return this.Equals( ( ReceivingContext )obj );
		}
				
		/// <summary>
		/// 	Compare specified object is equal to this instnace.
		/// </summary>
		/// <param name="obj">
		/// 	<see cref="ReceivingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified instance equals to this instance then true.
		/// </returns>
		public bool Equals( ReceivingContext other )
		{
			return ( this._sessionContext == null ? other._sessionContext == null : this._sessionContext.Equals( other._sessionContext ) ) && ( this._receivingBuffer == null ? other._receivingBuffer == null : this._receivingBuffer.Equals( other._receivingBuffer ) ) && ( this._unpacker == null ? other._unpacker == null : this._unpacker.Equals( other._unpacker ) );
		}
		
		/// <summary>
		/// 	Compare specified two objects are equal.
		/// </summary>
		/// <param name="left">
		/// 	<see cref="ReceivingContext"/> to compare.
		/// </param>
		/// <param name="right">
		/// 	<see cref="ReceivingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified objects are equal then true.
		/// </returns>
		public static bool operator ==( ReceivingContext left, ReceivingContext right )
		{
			return left.Equals( right );
		}
		
		/// <summary>
		/// 	Compare specified two objects are not equal.
		/// </summary>
		/// <param name="left">
		/// 	<see cref="ReceivingContext"/> to compare.
		/// </param>
		/// <param name="right">
		/// 	<see cref="ReceivingContext"/> to compare.
		/// </param>
		/// <returns>
		/// 	If specified objects are not equal then true.
		/// </returns>
		public static bool operator !=( ReceivingContext left, ReceivingContext right )
		{
			return !left.Equals( right );
		}		
	}
}